#!/usr/bin/python3
""" This is a python unittest module"""


import unittest


def add(a, b):
    """
    Add two numbers after ensuring they are integers or floats.

    Args:
    - a (int/float): The first number.
    - b (int/float): The second number.

    Returns:
    - int: The sum of a and b.

    Raises:
    - TypeError: If a or b are not int or float.
    """
    if not isinstance(a, (int, float)):
        raise TypeError("a must be integer.")
    if not isinstance(b, (int, float)):
        raise TypeError("b must be an integer.")
    return int(a) + int(b)


class TestAddFunction(unittest.TestCase):
    """Test cases for the add function."""

    def test_add(self):
        """Test normal addition scenarios."""
        self.assertEqual(add(3, 2.4), 5)
        self.assertEqual(add(2, 0), 2)
        self.assertEqual(add(2, -1), 1)
        self.assertEqual(add(-2, 3), 1)
    
    def test_add_type_errors(self):
        """Test scenarios where type errors should be raised."""
        with self.assertRaises(TypeError) as context:
            add('a', 3)
        self.assertEqual(str(context.exception), 'a must be integer.')

        with self.assertRaises(TypeError) as context:
            add(3, 'b')
        self.assertEqual(str(context.exception), 'b must be an integer.')
    
    def test_add_name_errors(self):
        """Test scenarios where name errors should be raised."""
        with self.assertRaises(NameError):
            add(a, 2)

        with self.assertRaises(NameError):
            add(a, b)
    
    def test_add_overflow_errors(self):
        """Test scenarios where overflow errors should be raised."""
        with self.assertRaises(OverflowError) as context:
            add(5, float('inf'))
        self.assertEqual(str(context.exception), 
                         "cannot convert float infinity to integer")


if __name__ == "__main__":
    unittest.main()

